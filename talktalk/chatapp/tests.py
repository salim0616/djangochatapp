
# Generated by CodiumAI
from chatapp.views import register
import statistics
from chatapp.serializers import RegisterSerializer
from rest_framework import status

import pytest

class TestRegister:

    # Valid input data returns HTTP 200 OK and success message
    def test_valid_input_data_returns_http_200_ok_and_success_message(self):
        # Arrange
        request_data = {
            'username': 'testuser',
            'password': 'testpassword',
            'email': 'test@example.com',
            'phone_number': '1234567890'
        }
    
        # Act
        response = register(request_data)
    
        # Assert
        assert response.status_code == status.HTTP_200_OK
        assert response.data == 'Successfully Registered'

    # Empty input data returns HTTP 400 BAD REQUEST and error message
    def test_empty_input_data_returns_http_400_bad_request_and_error_message(self):
        # Arrange
        request_data = {}
    
        # Act
        response = register(request_data)
    
        # Assert
        assert response.status_code == status.HTTP_400_BAD_REQUEST
        assert response.data == registerserializer.errors

    # Valid input data with missing optional fields returns HTTP 200 OK and success message
    def test_valid_input_data_with_missing_optional_fields_returns_http_200_ok_and_success_message(self):
        # Arrange
        request_data = {
            'username': 'testuser',
            'password': 'testpassword',
            'email': 'test@example.com'
        }
    
        # Act
        response = register(request_data)
    
        # Assert
        assert response.status_code == status.HTTP_200_OK
        assert response.data == 'Successfully Registered'

    # Invalid input data with missing required fields returns HTTP 400 BAD REQUEST and error message
    def test_invalid_input_data_with_missing_required_fields_returns_http_400_bad_request_and_error_message(self):
        # Arrange
        request_data = {
            'username': 'testuser',
            'email': 'test@example.com',
            'phone_number': '1234567890'
        }
    
        # Act
        response = register(request_data)
    
        # Assert
        assert response.status_code == status.HTTP_400_BAD_REQUEST
        assert response.data == registerserializer.errors

    # Invalid input data with invalid password returns HTTP 400 BAD REQUEST and error message
    def test_invalid_input_data_with_invalid_password_returns_http_400_bad_request_and_error_message(self):
        # Arrange
        request_data = {
            'username': 'testuser',
            'password': 'pass',
            'email': 'test@example.com',
            'phone_number': '1234567890'
        }
    
        # Act
        response = register(request_data)
    
        # Assert
        assert response.status_code == status.HTTP_400_BAD_REQUEST
        assert response.data == registerserializer.errors

    # Invalid input data with invalid phone number returns HTTP 400 BAD REQUEST and error message
    def test_invalid_input_data_with_invalid_phone_number_returns_http_400_bad_request_and_error_message(self):
        # Arrange
        request_data = {
            'username': 'testuser',
            'password': 'testpassword',
            'email': 'test@example.com',
            'phone_number': '123'
        }
    
        # Act
        response = register(request_data)
    
        # Assert
        assert response.status_code == status.HTTP_400_BAD_REQUEST
        assert response.data == registerserializer.errors